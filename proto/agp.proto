syntax = "proto3";

package dawn.agp;

// Agent Gateway Protocol (AGP) service definition
// This service implements the gateway functionality for the DAWN architecture
service AgentGatewayService {
  // Register an agent with the gateway
  rpc RegisterAgent(RegisterAgentRequest) returns (RegisterAgentResponse);
  
  // Unregister an agent from the gateway
  rpc UnregisterAgent(UnregisterAgentRequest) returns (UnregisterAgentResponse);
  
  // Get information about a specific agent
  rpc GetAgent(GetAgentRequest) returns (GetAgentResponse);
  
  // List all registered agents, with optional filtering
  rpc ListAgents(ListAgentsRequest) returns (ListAgentsResponse);
  
  // Query the gateway for agents with specific capabilities
  rpc FindAgentsByCapability(FindAgentsByCapabilityRequest) returns (FindAgentsByCapabilityResponse);
  
  // Validate an agent's capabilities and accessibility
  rpc ValidateAgent(ValidateAgentRequest) returns (ValidateAgentResponse);
}

// Agent information
message Agent {
  string id = 1;
  string name = 2;
  string description = 3;
  string provider = 4;
  string version = 5;
  repeated Capability capabilities = 6;
  map<string, string> metadata = 7;
  string created_at = 8;
  string endpoint = 9;
}

// Capability information
message Capability {
  string id = 1;
  string type = 2;
  string name = 3;
  string description = 4;
  string version = 5;
  map<string, string> parameters = 6;
  map<string, string> metadata = 7;
}

// Request to register an agent
message RegisterAgentRequest {
  Agent agent = 1;
  string auth_token = 2;
}

// Response to agent registration
message RegisterAgentResponse {
  string agent_id = 1;
  string registration_token = 2;
  int64 expires_at = 3;
  bool success = 4;
  string message = 5;
}

// Request to unregister an agent
message UnregisterAgentRequest {
  string agent_id = 1;
  string auth_token = 2;
}

// Response to agent unregistration
message UnregisterAgentResponse {
  bool success = 1;
  string message = 2;
}

// Request to get information about a specific agent
message GetAgentRequest {
  string agent_id = 1;
}

// Response with agent information
message GetAgentResponse {
  bool success = 1;
  string message = 2;
  Agent agent = 3;
}

// Request to list registered agents with optional filters
message ListAgentsRequest {
  // Filters for agents by various criteria
  map<string, string> filters = 1;
  int32 limit = 2;
  int32 offset = 3;
}

// Response with list of agents
message ListAgentsResponse {
  bool success = 1;
  string message = 2;
  repeated Agent agents = 3;
  int32 total_count = 4;
}

// Request to find agents with specific capabilities
message FindAgentsByCapabilityRequest {
  string capability_type = 1;
  map<string, string> parameters = 2;
}

// Response with agents matching capability criteria
message FindAgentsByCapabilityResponse {
  bool success = 1;
  string message = 2;
  repeated Agent agents = 3;
}

// Request to validate an agent
message ValidateAgentRequest {
  string agent_id = 1;
}

// Response with validation results
message ValidateAgentResponse {
  bool valid = 1;
  string reason = 2;
  map<string, bool> capability_validation = 3;
}